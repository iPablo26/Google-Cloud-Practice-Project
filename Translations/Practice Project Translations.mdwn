# First LAB: VPC Networking

## Objectives: 

In this lab, you learn how to perform the following tasks:

    - Explore the default VPC network
    
    - Create an auto mode network with firewall rules
    
    - Convert an auto mode network to a custom mode network
    
    - Create custom mode VPC networks with firewall rules
    
    - Create VM instances using Compute Engine
    
    - Explore the connectivity for VM instances across VPC networks

## Steps:

1. Explore the default network:
   
     # View the subnets
     gcloud compute networks subnets list

    # View the routes
     gcloud compute routes list 

     # View the firewall rules
     gcloud compute firewall-rules list

    # Delete the Firewall rules
     gcloud compute firewall-rules delete 'default-allow-icmp'

    # Delete the default network
     gcloud compute networks delete default

    # Try to create a VM instance (will fail)
     gcloud compute instances create pablo-2682 --subnet=default


2. Create an auto mode network:

    # Create an auto mode VPC network with firewall rules
    gcloud compute networks create mynetwork --subnet-mode=auto

    # Create a VM instance in us-central1
    gcloud compute firewall-rules create mynetwork --direction=INGRESS --priority=65534 --network=mynetwork --action=ALLOW --rules=all --source-ranges=0.0.0.0/0

    # Create a VM instance in europe-west1
    gcloud compute instances create mynet-us-vm --zone=us-central1-c --machine-type=n1-standard-1 --subnet=mynetwork

    # Verify connectivity for the VM instances
    gcloud compute instances create mynet-eu-vm --zone=europe-west1-c --machine-type=n1-standard-1 --subnet=mynetwork

    # For mynet-us-vm, click SSH to launch a terminal and connect
    ping -c 3 10.132.0.2

    # Repeat the same test by running the following
    ping -c 3 mynet-eu-vm

    # To test connectivity to mynet-eu-vm's external IP
    ping -c 3 <Enter mynet-eu-vm's external IP here>

    # Convert the network to a custom mode network
    gcloud compute networks update mynetwork --switch-to-custom-subnet-mode

3. Create custom mode networks:

    # Create the managementnet network
    gcloud compute networks create managementnet --subnet-mode=custom

    # To create the managementsubnet-us subnet, run the following command:
    gcloud compute networks subnets create managementsubnet-us --range=10.130.0.0/20 --network=managementnet --region=us-central1

    # Create the privatenet network
    gcloud compute networks create privatenet --subnet-mode=custom
     
    # To create the privatesubnet-us subnet, run the following command:
    gcloud compute networks subnets create privatesubnet-us --network=privatenet --region=us-central1 --range=172.16.0.0/24

    # To create the privatesubnet-eu subnet, run the following command:
    gcloud compute networks subnets create privatesubnet-eu --network=privatenet --region=europe-west1 --range=172.20.0.0/20

    # To list the available VPC networks, run the following command:
    gcloud compute networks list

    # To list the available VPC subnets (sorted by VPC network), run the following command:
    gcloud compute networks subnets list --sort-by=NETWORK

    # Create the firewall rules for managementnet
    gcloud compute firewall-rules create managementnet-allow-icmp-ssh-rdp --direction=INGRESS --priority=1000 --network=managementnet --action=ALLOW --rules=tcp:22,tcp:3389,icmp --source-ranges=0.0.0.0/0

    # Create the firewall rules for privatenet
    gcloud compute firewall-rules create privatenet-allow-icmp-ssh-rdp --direction=INGRESS --priority=1000 --network=privatenet --action=ALLOW --rules=icmp,tcp:22,tcp:3389 --source-ranges=0.0.0.0/0

    # To list all the firewall rules (sorted by VPC network), run the following command:
    gcloud compute firewall-rules list --sort-by=NETWORK

    # Create the managementnet-us-vm instance
    gcloud compute instances create managementnet-us-vm --zone=us-central1-c --machine-type=f1-micro --subnet=managementsubnet-us

    # Create the privatenet-us-vm instance
    gcloud compute instances create privatenet-us-vm --zone=us-central1-c --machine-type=f1-micro --subnet=privatesubnet-us

    # To list all the VM instances (sorted by zone), run the following command
    gcloud compute instances list --sort-by=ZONE

4. Explore the connectivity across networks

    # Ping the external IP addresses
    For mynet-us-vm, click SSH to launch a terminal and connect

    # To test connectivity to mynet-eu-vm's external IP, run the following command
    ping -c 3 <Enter mynet-eu-vm's external IP here>

    # To test connectivity to managementnet-us-vm's external IP, run the following
    ping -c 3 <Enter managementnet-us-vm's external IP here>

    # To test connectivity to privatenet-us-vm's external IP, run the following command
    ping -c 3 <Enter privatenet-us-vm's external IP here>

    # Return to the SSH terminal for mynet-us-vm: To test connectivity to mynet-eu-vm's internal IP, run the following command
    ping -c 3 <Enter mynet-eu-vm's internal IP here>

    # To test connectivity to managementnet-us-vm's internal IP, run the following
    ping -c 3 <Enter managementnet-us-vm's internal IP here>

    # To test connectivity to privatenet-us-vm's internal IP, run the following command
    ping -c 3 <Enter privatenet-us-vm's internal IP here>



# Second LAB: Implement Private Google Access and Cloud NAT

## Objectives: 

In this lab, you learn how to perform the following tasks:

    - Configure a VM instance that doesn't have an external IP address
    
    - Connect to a VM instance using an Identity-Aware Proxy (IAP) tunnel
    
    - Enable Private Google Access on a subnet
    
    - Configure a Cloud NAT gateway
    
    - Verify access to public IP addresses of Google APIs and services and other connections to the internet

## Steps:

1. Create the VM instance:

    # Create a VPC network 
    gcloud compute networks create privatenet --subnet-mode=custom 

    gcloud compute networks subnets create privatenet-us --range=10.130.0.0/20 --network=privatenet --region=us-central1

    # Create firewall rules
    gcloud compute firewall-rules create privatenet-allow-ssh --direction=INGRESS --priority=1000 --network=privatenet --action=ALLOW --rules=tcp:22 --source-ranges=35.235.240.0/20

    # Create the VM instance with no public IP address
    gcloud compute instances create vm-internal --zone=us-central1-c --machine-type=n1-standard-1 --subnet=privatenet-us --no-address 

    # SSH to vm-internal to test the IAP tunnel: To connect to vm-internal, run the following command:
    gcloud compute ssh vm-internal --zone us-central1-c --tunnel-through-iap

    # To test the external connectivity of vm-internal, run the following command:
    ping -c 2 www.google.com

    # To return to your gcloud SDK instance, run the following command:
    exit

2. Enable Private Google Access:

    # Create a Cloud Storage bucket
    gsutil mb gs://gads-2020

    # Copy an image file into your bucket
    gsutil cp gs://cloud-training/gcpnet/private/access.svg gs://gads-2020

    # In Cloud Shell, to try to copy the image from your bucket, run the following command
    gsutil cp gs://gads-2020/*.svg .

    # To connect to vm-internal, run the following command
    gcloud compute ssh vm-internal --zone us-central1-c --tunnel-through-iap

    # To try to copy the image to vm-internal
    gsutil cp gs://gads-2020/*.svg .

    # Enable Private Google Access
    gcloud compute networks subnets update privatenet-us --region=us-central1 --enable-private-ip-google-access

    # In gcloud SDK for vm-internal, to try to copy the image to vm-internal
    gsutil cp gs://gads-2020/*.svg .

    # To return to your gcloud SDK instance, run the following command:
    exit

3. Configure a Cloud NAT gateway

    # Try to update the VM instances
    sudo apt-get update

    # To connect to vm-internal
    gcloud compute ssh vm-internal --zone us-central1-c --tunnel-through-iap

    # To try to re-synchronize the package index of vm-internal
    sudo apt-get update

    # Configure a Cloud NAT gateway
    gcloud compute routers create nat-router --network privatenet --region us-central1

    gcloud compute routers nats create nat-config --router=nat-router --auto-allocate-nat-external-ips --nat-all-subnet-ip-ranges --region us-central1

    # Verify the Cloud NAT gateway
    sudo apt-get update

    # To return to your gcloud SDK instance
    exit

4. Configure and view logs with Cloud NAT Logging

    # Enabling logging
    gcloud compute routers nats update nat-config --router=nat-router --region=us-central1 --enable-logging --log-filter=ALL

    # NAT logging in Cloud Operations
    gcloud logging read 'resource.type=nat_gateway' --limit=10 --format=json

    # Generating logs: In gcloud SDK for vm-internal, to try to re-synchronize the package index of vm-internal
    gcloud compute ssh vm-internal --zone us-central1-c --tunnel-through-iap

    sudo apt-get update

    exit

    # Viewing Logs
    gcloud logging read 'resource.type=nat_gateway' --limit=10 --format=json


# Third LAB: Creating Virtual Machines

## Objectives: 

In this lab, you learn how to perform the following tasks:

    - Create several standard VMs

    - Create advanced VMs

## Steps:

1. Create a utility virtual machine:

    # Create a VM
    gcloud compute instances create gads-instance --zone=us-central1-c --machine-type=n1-standard-1 --subnet=default --no-address 

    # Explore the VM details
    gcloud compute instances describe gads-instance

    # Explore the VM logs
    gcloud logging read "resource.type=gce_instance"


2. Create a Windows virtual machine:

    # Create a VM
    gcloud compute instances create gads-windows --zone=europe-west2-a --machine-type=n1-standard-2 --subnet=default --no-address --tags=http-server,https-server --image=windows-server-2016-dc-core-v20200813 --image-project=windows-cloud --boot-disk-size=100GB --boot-disk-type=pd-ssd --boot-disk-device-name=gads-windows

    gcloud compute firewall-rules create default-allow-http --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server

    gcloud compute firewall-rules create default-allow-https --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:443 --source-ranges=0.0.0.0/0 --target-tags=https-server

    # Set the password for the VM
    gcloud compute reset-windows-password gads-windows


3. Create a custom virtual machine:

    # Create a VM
    gcloud compute instances create gads-custom --zone=us-west1-b --machine-type=custom-6-32768 --subnet=default --network-tier=PREMIUM 

    # Connect via SSH to your custom VM
    For the custom VM you just created, click SSH

    # To see information about unused and used memory and swap space on your custom VM, run the following command:
    free

    # To see details about the RAM installed on your VM, run the following command:
    sudo dmidecode -t 17

    # To verify the number of processors, run the following command:
    nproc

    # To see details about the CPUs installed on your VM, run the following command:
    lscpu

    # To exit the SSH terminal, run the following command:
    exit